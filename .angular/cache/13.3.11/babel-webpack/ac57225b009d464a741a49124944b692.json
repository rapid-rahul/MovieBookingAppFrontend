{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\2106472\\\\Downloads\\\\moviebookingapp-main\\\\moviebookingapp-main\\\\moviebookingappfrontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { of } from 'rxjs';\nimport { TicketBookingService } from '../ticket-booking.service';\nimport { Tickets } from '../Tickets';\nimport { TicketBookingComponent } from './ticket-booking.component';\ndescribe('TicketBookingComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [TicketBookingComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],\n      providers: [TicketBookingComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TicketBookingComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component = TestBed.inject(TicketBookingComponent);\n    service = TestBed.inject(TicketBookingService);\n    router = TestBed.inject(Router);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('ticket booking', () => {\n    it('booking', () => {\n      const msg = 'Ticket booked successfully'; //const movie ={key:{movieName:'RRR',theatreName:\"PVR\"},totalNoOfTickets:250};\n\n      component.booking();\n      component.seats = ['1', '2'];\n      spyOn(service, 'bookTickets').and.returnValue(of(msg));\n      service.bookTickets(new Tickets({\n        key: {\n          movieName: 'RRR',\n          theatreName: \"PVR\"\n        },\n        totalNoOfTickets: 250\n      }, 2, ['1', '2'])).subscribe(data => {\n        expect(data).toEqual(msg);\n      });\n    });\n    it('cancel booking', () => {\n      component.cancel();\n      const navigateSpy = spyOn(router, 'navigate');\n      component.cancel();\n      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/2106472/Downloads/moviebookingapp-main/moviebookingapp-main/moviebookingappfrontend/src/app/ticket-booking/ticket-booking.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","FormsModule","Router","RouterTestingModule","of","TicketBookingService","Tickets","TicketBookingComponent","describe","component","fixture","service","router","beforeEach","configureTestingModule","declarations","imports","withRoutes","providers","compileComponents","createComponent","componentInstance","detectChanges","inject","it","expect","toBeTruthy","msg","booking","seats","spyOn","and","returnValue","bookTickets","key","movieName","theatreName","totalNoOfTickets","subscribe","data","toEqual","cancel","navigateSpy","toHaveBeenCalledWith"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { of } from 'rxjs';\r\nimport { TicketBookingService } from '../ticket-booking.service';\r\nimport { Tickets } from '../Tickets';\r\nimport { TicketBookingComponent } from './ticket-booking.component';\r\ndescribe('TicketBookingComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    let router;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [TicketBookingComponent],\r\n            imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],\r\n            providers: [TicketBookingComponent]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(TicketBookingComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        component = TestBed.inject(TicketBookingComponent);\r\n        service = TestBed.inject(TicketBookingService);\r\n        router = TestBed.inject(Router);\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    describe('ticket booking', () => {\r\n        it('booking', () => {\r\n            const msg = 'Ticket booked successfully';\r\n            //const movie ={key:{movieName:'RRR',theatreName:\"PVR\"},totalNoOfTickets:250};\r\n            component.booking();\r\n            component.seats = ['1', '2'];\r\n            spyOn(service, 'bookTickets').and.returnValue(of(msg));\r\n            service.bookTickets(new Tickets({ key: { movieName: 'RRR', theatreName: \"PVR\" }, totalNoOfTickets: 250 }, 2, ['1', '2'])).\r\n                subscribe(data => {\r\n                expect(data).toEqual(msg);\r\n            });\r\n        });\r\n        it('cancel booking', () => {\r\n            component.cancel();\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.cancel();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}