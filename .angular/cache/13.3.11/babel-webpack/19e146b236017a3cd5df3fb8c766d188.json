{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\2106472\\\\Downloads\\\\moviebookingapp-main\\\\moviebookingapp-main\\\\moviebookingappfrontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { of } from 'rxjs';\nimport { BackendService } from '../backend.service';\nimport { RegisteruserComponent } from './registeruser.component';\ndescribe('RegisteruserComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [RegisteruserComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule, ReactiveFormsModule],\n      providers: [RegisteruserComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(RegisteruserComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component = TestBed.inject(RegisteruserComponent);\n    service = TestBed.inject(BackendService);\n    router = TestBed.inject(Router);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('register user', () => {\n    it('add user fail', () => {\n      component.UserForm.controls['password'].setValue('12345');\n      component.UserForm.controls['confirmPassword'].setValue('123459');\n      component.add();\n      expect(component.status).toBeFalsy();\n    });\n    it('add user pass', () => {\n      const user = {\n        loginId: 'nehal99',\n        email: 'nehal@gmail.com',\n        firstName: 'nehal',\n        lastname: 'ahmad',\n        password: '12345',\n        confirmPassword: '12345',\n        contactNumber: '9876543212'\n      };\n      component.UserForm.controls['password'].setValue('12345');\n      component.UserForm.controls['confirmPassword'].setValue('12345');\n      component.add();\n      spyOn(service, 'addUser').and.returnValue(of(user));\n      service.addUser(user).subscribe(data => {\n        expect(data).toEqual(user);\n      });\n      const navigateSpy = spyOn(router, 'navigate');\n      component.add();\n      expect(navigateSpy).toHaveBeenCalledWith(['']);\n    });\n    it('cancel', () => {\n      //component.cancel()\n      const navigateSpy = spyOn(router, 'navigate');\n      component.cancel();\n      expect(navigateSpy).toHaveBeenCalledWith(['']);\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/2106472/Downloads/moviebookingapp-main/moviebookingapp-main/moviebookingappfrontend/src/app/registeruser/registeruser.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","FormsModule","ReactiveFormsModule","Router","RouterTestingModule","of","BackendService","RegisteruserComponent","describe","component","fixture","service","router","beforeEach","configureTestingModule","declarations","imports","withRoutes","providers","compileComponents","createComponent","componentInstance","detectChanges","inject","it","expect","toBeTruthy","UserForm","controls","setValue","add","status","toBeFalsy","user","loginId","email","firstName","lastname","password","confirmPassword","contactNumber","spyOn","and","returnValue","addUser","subscribe","data","toEqual","navigateSpy","toHaveBeenCalledWith","cancel"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { of } from 'rxjs';\r\nimport { BackendService } from '../backend.service';\r\nimport { RegisteruserComponent } from './registeruser.component';\r\ndescribe('RegisteruserComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    let router;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [RegisteruserComponent],\r\n            imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule, ReactiveFormsModule],\r\n            providers: [RegisteruserComponent]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(RegisteruserComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        component = TestBed.inject(RegisteruserComponent);\r\n        service = TestBed.inject(BackendService);\r\n        router = TestBed.inject(Router);\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    describe('register user', () => {\r\n        it('add user fail', () => {\r\n            component.UserForm.controls['password'].setValue('12345');\r\n            component.UserForm.controls['confirmPassword'].setValue('123459');\r\n            component.add();\r\n            expect(component.status).toBeFalsy();\r\n        });\r\n        it('add user pass', () => {\r\n            const user = { loginId: 'nehal99', email: 'nehal@gmail.com', firstName: 'nehal', lastname: 'ahmad', password: '12345',\r\n                confirmPassword: '12345', contactNumber: '9876543212' };\r\n            component.UserForm.controls['password'].setValue('12345');\r\n            component.UserForm.controls['confirmPassword'].setValue('12345');\r\n            component.add();\r\n            spyOn(service, 'addUser').and.returnValue(of(user));\r\n            service.addUser(user).subscribe(data => {\r\n                expect(data).toEqual(user);\r\n            });\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.add();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['']);\r\n        });\r\n        it('cancel', () => {\r\n            //component.cancel()\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.cancel();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['']);\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}