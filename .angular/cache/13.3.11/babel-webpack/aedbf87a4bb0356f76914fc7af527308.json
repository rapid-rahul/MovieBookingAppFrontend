{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\2106472\\\\Downloads\\\\moviebookingapp-main\\\\moviebookingapp-main\\\\moviebookingappfrontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { of } from 'rxjs';\nimport { AppComponent } from '../app.component';\nimport { BackendService } from '../backend.service';\nimport { LoginComponent } from './login.component';\ndescribe('LoginComponent', () => {\n  let component;\n  let service;\n  let router;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],\n      providers: [AppComponent, LoginComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component = TestBed.inject(LoginComponent);\n    service = TestBed.inject(BackendService);\n    router = TestBed.inject(Router);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  describe('login component', () => {\n    it('authenticate user', () => {\n      const status = true;\n      component.authenticateUser();\n      spyOn(service, 'authenticate').and.returnValue(of(status));\n      service.authenticate('1234', '12345').subscribe(res => {\n        expect(res).toBeTruthy();\n      });\n      const navigateSpy = spyOn(router, 'navigate');\n      component.authenticateUser();\n      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\n    });\n    it('sign up', () => {\n      component.signUp();\n      const navigateSpy = spyOn(router, 'navigate');\n      component.signUp();\n      expect(navigateSpy).toHaveBeenCalledWith(['register']);\n    });\n    it('authenticate admin', () => {\n      const status = true;\n      component.adminLogin();\n      spyOn(service, 'authenticate').and.returnValue(of(status));\n      service.authenticate('1234', '12345').subscribe(res => {\n        expect(res).toBeTruthy();\n      });\n      const navigateSpy = spyOn(router, 'navigate');\n      component.adminLogin();\n      expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/2106472/Downloads/moviebookingapp-main/moviebookingapp-main/moviebookingappfrontend/src/app/login/login.component.spec.ts"],"names":["HttpClientTestingModule","TestBed","FormsModule","Router","RouterTestingModule","of","AppComponent","BackendService","LoginComponent","describe","component","service","router","fixture","beforeEach","configureTestingModule","declarations","imports","withRoutes","providers","compileComponents","createComponent","componentInstance","detectChanges","inject","it","expect","toBeTruthy","status","authenticateUser","spyOn","and","returnValue","authenticate","subscribe","res","navigateSpy","toHaveBeenCalledWith","signUp","adminLogin"],"mappings":"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","sourcesContent":["import { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { of } from 'rxjs';\r\nimport { AppComponent } from '../app.component';\r\nimport { BackendService } from '../backend.service';\r\nimport { LoginComponent } from './login.component';\r\ndescribe('LoginComponent', () => {\r\n    let component;\r\n    let service;\r\n    let router;\r\n    let fixture;\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [LoginComponent],\r\n            imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), FormsModule],\r\n            providers: [AppComponent, LoginComponent]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(LoginComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        component = TestBed.inject(LoginComponent);\r\n        service = TestBed.inject(BackendService);\r\n        router = TestBed.inject(Router);\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    describe('login component', () => {\r\n        it('authenticate user', () => {\r\n            const status = true;\r\n            component.authenticateUser();\r\n            spyOn(service, 'authenticate').and.returnValue(of(status));\r\n            service.authenticate('1234', '12345').subscribe(res => {\r\n                expect(res).toBeTruthy();\r\n            });\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.authenticateUser();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\r\n        });\r\n        it('sign up', () => {\r\n            component.signUp();\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.signUp();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['register']);\r\n        });\r\n        it('authenticate admin', () => {\r\n            const status = true;\r\n            component.adminLogin();\r\n            spyOn(service, 'authenticate').and.returnValue(of(status));\r\n            service.authenticate('1234', '12345').subscribe(res => {\r\n                expect(res).toBeTruthy();\r\n            });\r\n            const navigateSpy = spyOn(router, 'navigate');\r\n            component.adminLogin();\r\n            expect(navigateSpy).toHaveBeenCalledWith(['movieslist']);\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}